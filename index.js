require('dotenv').config();
const {¬†
Client,¬†
GatewayIntentBits,¬†
Events,
ActionRowBuilder,
ButtonBuilder,
ButtonStyle
} = require('discord.js');
const { google } = require('googleapis');
const { JWT } = require('google-auth-library');
// üí° ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ http module ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Web Server (Keep Alive)
const http = require('http');¬†

// ‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå credentials.json ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
const credentials = require('./credentials.json');¬†

// ===================================
// üõ†Ô∏è CONFIGURATION
// ===================================
const CONFIG = {
// ‚ùó‚ùó ID ‡∏ä‡∏µ‡∏ï‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
SPREADSHEET_ID: '18Thz-4LBvkwn77gMEUDxL19sh0t1WXAOoh408UJ5BSY',¬†
SHEET_NAME: 'bot3',

// üö© ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Channel ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C, D, E, ...)
CHANNEL_IDS: [
'1426879119966339114', // Channel 1 -> ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C (Index 0)
'1426879191932211200', // Channel 2 -> ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D (Index 1)
'1426879230213357618'¬† // Channel 3 -> ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå E (Index 2)
],
// ID ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (Historical Count)
COMMAND_CHANNEL_ID: '1432300750830309477',¬†

// üö´ ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
EXCLUDED_USER_ID: '',¬†

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏á (ms) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á Rate Limit ‡∏Ç‡∏≠‡∏á Google Sheets API
BATCH_DELAY: 150,¬†
UPDATE_DELAY: 50,
};

const COUNT_BUTTON_ID = 'start_historical_count';

// ===================================
// ü§ñ DISCORD BOT INITIALIZATION
// ===================================
const client = new Client({
intents: [
GatewayIntentBits.Guilds,
GatewayIntentBits.GuildMessages,
GatewayIntentBits.MessageContent,
GatewayIntentBits.GuildMembers¬†
]
});

// ===================================
// üìä GOOGLE SHEETS SETUP (JWT)
// ===================================
const auth = new JWT({
email: credentials.client_email,
key: credentials.private_key,
scopes: ['https://www.googleapis.com/auth/spreadsheets']
});
const gsapi = google.sheets({ version: 'v4', auth });


// ===================================
// üìö CORE FUNCTIONS
// ===================================

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
 */
function getStartCountMessage() {
const row = new ActionRowBuilder()
.addComponents(
new ButtonBuilder()
.setCustomId(COUNT_BUTTON_ID)
.setLabel('‚≠ê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤')
.setStyle(ButtonStyle.Primary),
);

return {
components: [row]
};
}


/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡∏á Google Sheets¬†
 */
async function batchUpdateMentions(batchMap, channelIndex) {
const range = `${CONFIG.SHEET_NAME}!A:E`;¬†
const response = await gsapi.spreadsheets.values.get({
spreadsheetId: CONFIG.SPREADSHEET_ID,
range
});

const rows = response.data.values || [];
const updates = [];
const colIndex = 2 + channelIndex;¬†

for (const [key, count] of batchMap.entries()) {
const [username, mentionText] = key.split('|');
let rowIndex = rows.findIndex(r => r[0] === username && r[1] === mentionText);

if (rowIndex >= 0) {
const current = parseInt(rows[rowIndex][colIndex] || '0');
const newCount = current + count;
updates.push({
range: `${CONFIG.SHEET_NAME}!${String.fromCharCode(65+colIndex)}${rowIndex+1}`,¬†
values: [[newCount]]
});
rows[rowIndex][colIndex] = newCount;
} else {
const appendRow = rows.length + 1;¬†
const newRow = [username, mentionText, 0, 0, 0];
newRow[colIndex] = count;
updates.push({
range: `${CONFIG.SHEET_NAME}!A${appendRow}:E${appendRow}`,
values: [newRow]
});
rows.push(newRow);
}
}

for (const u of updates) {
await gsapi.spreadsheets.values.update({
spreadsheetId: CONFIG.SPREADSHEET_ID,
range: u.range,
valueInputOption: 'RAW',
requestBody: { values: u.values }
});
await new Promise(r => setTimeout(r, CONFIG.UPDATE_DELAY));
}
}


/**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á Nickname ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö Mention
 */
async function processMessagesBatch(messages, channelIndex) {

const EXCLUDED_USER_ID = CONFIG.EXCLUDED_USER_ID;¬†
const batchMap = new Map();

for (const message of messages) {
if (message.author.bot) continue;
if (message.mentions.users.size === 0) continue;
if (!message.guild) continue;¬†

for (const user of message.mentions.users.values()) {

if (EXCLUDED_USER_ID && user.id === EXCLUDED_USER_ID) continue;¬†

let member = message.guild.members.cache.get(user.id);
if (!member) {
try {
member = await message.guild.members.fetch(user.id);
} catch (e) {
continue;¬†
}
}

if (!member) continue;¬†

// 1. ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å (Nickname): ‡πÉ‡∏ä‡πâ DisplayName/Nickname (‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
const username = member.displayName;¬†

// 2. ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (Mention Text): ‡πÉ‡∏ä‡πâ Username¬†
const mentionText = user.username;¬†

const regex = new RegExp(`<@!?${user.id}>`, 'g');
let match;
let mentionCount = 0;
// ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Mention ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
while ((match = regex.exec(message.content)) !== null) {
mentionCount++;
}

if (mentionCount > 0) {
// key ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 'Nickname|Username'
const key = `${username}|${mentionText}`;¬†
batchMap.set(key, (batchMap.get(key) || 0) + mentionCount);
}
}
}

if (batchMap.size > 0) {
await batchUpdateMentions(batchMap, channelIndex);
}
}


/**
 * ‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å Channel (Historical Count)
 */
async function processOldMessages(channelId, channelIndex) {
try {
const channel = await client.channels.fetch(channelId).catch(() => null);
if (!channel) return console.log(`Channel ${channelId} not found.`);

let lastId;
while (true) {
const options = { limit: 50 };
if (lastId) options.before = lastId;

const messages = await channel.messages.fetch(options);
if (messages.size === 0) break;

await Promise.all(messages.map(m => m.partial ? m.fetch() : m));¬†

await processMessagesBatch(messages.values(), channelIndex);
lastId = messages.last().id;
await new Promise(r => setTimeout(r, CONFIG.BATCH_DELAY));
}
console.log(`Finished processing old messages for channel ${channelId}.`);
} catch (error) {
console.error(`Error processing channel ${channelId}:`, error);
}
}

// ===================================
// üö¶ DISCORD EVENTS
// ===================================

// ====== Bot Ready (‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á) ======
client.once(Events.ClientReady, async () => {
console.log(`Logged in as ${client.user.tag}`);

try {
const commandChannel = await client.channels.fetch(CONFIG.COMMAND_CHANNEL_ID);
if (commandChannel && commandChannel.isTextBased()) {
// ‡∏™‡πà‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Historical Count
await commandChannel.send(getStartCountMessage());
console.log(`Sent start count button to channel ${CONFIG.COMMAND_CHANNEL_ID}`);
}
} catch (error) {
console.error('Error sending start count button:', error);
}
});

// ====== ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° (Historical Count Trigger) ======
client.on(Events.InteractionCreate, async interaction => {
if (!interaction.isButton()) return;
if (interaction.customId !== COUNT_BUTTON_ID) return;

// ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (Ephemeral)
await interaction.deferReply({ ephemeral: true });¬†

try {
// 1. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
await interaction.editReply({ content: '‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤... (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô)' });

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤
for (let i = 0; i < CONFIG.CHANNEL_IDS.length; i++) {
await processOldMessages(CONFIG.CHANNEL_IDS[i], i);
}

// 2. ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
await interaction.editReply('üéâ ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ');
await new Promise(r => setTimeout(r, 5000));
await interaction.deleteReply();

} catch (error) {
console.error('[Historical Count Error]:', error);
await interaction.editReply('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Log ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó');
}
});

// ====== [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ (Real-Time Count) ======
client.on(Events.MessageCreate, async message => {
// 1. ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö
if (message.author.bot) return;
if (message.mentions.users.size === 0) return;
if (!message.guild) return;
if (CONFIG.EXCLUDED_USER_ID && message.author.id === CONFIG.EXCLUDED_USER_ID) return;

// 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Channel ID ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const channelId = message.channelId;
const channelIndex = CONFIG.CHANNEL_IDS.indexOf(channelId);

if (channelIndex === -1) return;

try {
// 3. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
await processMessagesBatch([message], channelIndex);

console.log(`[Real-Time] Updated mention count for message in channel ${channelId}.`);

} catch (error) {
console.error('[Real-Time Count Error]:', error);
}
});


// ===================================
// üåê WEB SERVER (Keep Alive / 24/7)
// ===================================
http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.write('‚úÖ Discord Bot is alive and running on Replit!');
  res.end();
}).listen(3000, () => {
  console.log('üåê Web server running on port 3000 for UptimeRobot.');
});



// ===================================
// üîë LOGIN
// ===================================
// ‡πÉ‡∏ä‡πâ DISCORD_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ TOKEN ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ô .env ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÉ‡∏î‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á
const DISCORD_TOKEN = process.env.DISCORD_TOKEN || process.env.TOKEN;
client.login(DISCORD_TOKEN);